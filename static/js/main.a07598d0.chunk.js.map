{"version":3,"sources":["MapWrapper.js","Filtres.js","App.js","serviceWorker.js","index.js"],"names":["MapWrapper","state","vehicles","vehiclesDownloaded","fetch","then","res","json","setState","objects","forceUpdate","status","L","icon","iconUrl","listVehicles","this","props","filterAvailable","filter","vehicle","rangeKm","filterKilometersRange","min","max","map","val","Marker","position","location","latitude","longitude","setDynamicMarkerColor","key","id","Popup","className","name","platesNumber","style","backgroundColor","setDynamicStatusColor","src","alt","width","batteryLevelPct","Map","center","zoom","TileLayer","url","attribution","React","Component","Filtres","type","onChange","setFilterAvailable","maxValue","minValue","formatLabel","value","stateKilometersRange","setFilterKilometersRange","App","available","kilometersRange","prevState","Object","assign","stateAvailable","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a07598d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\r\nimport L from 'leaflet'\r\n\r\nclass MapWrapper extends React.Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      vehicles: {},\r\n      vehiclesDownloaded: false,\r\n    }\r\n  }\r\n// CONNECT TO API\r\n  componentDidMount() {\r\n    fetch(\"https://dev.vozilla.pl/api-client-portal/map?objectType=VEHICLE\")\r\n      .then(res => res.json())\r\n      .then(json => {this.setState({vehicles: json.objects, vehiclesDownloaded: true}); this.forceUpdate()});\r\n  }\r\n\r\n\r\n  setDynamicMarkerColor(status) {\r\n    return L.icon({\r\n      iconUrl: `https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-${status == 'AVAILABLE' ? 'green' : 'blue'}.png`,\r\n    });\r\n  }\r\n\r\n  setDynamicStatusColor(status) {\r\n    return status == 'AVAILABLE' ? '#28A745' : 'blue'\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let listVehicles = [];\r\n    if (this.state.vehiclesDownloaded) {\r\n      listVehicles = this.state.vehicles;\r\n\r\n      // FILTER OBJECTS\r\n      if(this.props.filterAvailable) { //SHOW ONLY AVAILABLE\r\n        listVehicles = listVehicles.filter(vehicle => vehicle.status == \"AVAILABLE\" )\r\n      }\r\n      // SHOW ONLY IF OBJECT CAN COVER TYPED DISTANCE\r\n      listVehicles = listVehicles.filter(vehicle => vehicle.rangeKm >= this.props.filterKilometersRange.min && vehicle.rangeKm <= this.props.filterKilometersRange.max )\r\n\r\n      listVehicles = listVehicles.map((val) => {\r\n        return (\r\n          <Marker position={[val.location.latitude, val.location.longitude]} icon={this.setDynamicMarkerColor(val.status)} key={val.id} >\r\n            <Popup>\r\n              <div className=\"vehiclePopup\">\r\n                <div className=\"textColumn\">\r\n                  <div>{val.name}</div>\r\n                  <div>{val.platesNumber}</div>\r\n\r\n                  \r\n                  <div className=\"rangeText\">\r\n                    Range: {val.rangeKm} km\r\n                  </div>\r\n\r\n                  <div className=\"statusWrapper\" style={{ backgroundColor: this.setDynamicStatusColor(val.status)}}>\r\n                    {val.status}\r\n                  </div>\r\n                  \r\n                </div>\r\n                <div className=\"photoColumn\">\r\n                  <img src=\"../cars/temporary-photo.png\" alt=\"\"/>\r\n                  <div className=\"myProgress\">\r\n                    <div className=\"myBar\" style={{ width: `${val.batteryLevelPct}%` }}></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        );\r\n      });\r\n    }\r\n\r\n    \r\n\r\n    const position = [52.2627124327, 21];\r\n    return (\r\n      <Map center={position} zoom={13}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n        />\r\n        { listVehicles }\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapWrapper;","import React from 'react'\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\n\r\nfunction Filtres(props) {\r\n\r\n  return (\r\n    <div className=\"filtres\">\r\n      <label className=\"chechbox-container\">Available\r\n        <input type=\"checkbox\" onChange={props.setFilterAvailable} />\r\n        <span className=\"checkmark\"></span>\r\n      </label>\r\n\r\n      <div className=\"filterLabel\">Distance to drive:\r\n        <InputRange\r\n        maxValue={300}\r\n        minValue={0}\r\n        formatLabel={value => `${value} km`}\r\n        value={props.stateKilometersRange}\r\n        onChange={value => props.setFilterKilometersRange({value})}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filtres","import React from 'react';\nimport './App.css';\nimport MapWrapper from './MapWrapper'\nimport Filtres from './Filtres'\n\n\n\nexport class App extends React.Component {\n\n  state = {\n    available: false,\n    kilometersRange: { min: 0, max: 300 },\n  };\n\n\n  setFilterKilometersRange = (value) => {\n\n    this.setState(prevState => {\n      let kilometersRange = Object.assign({}, prevState.kilometersRange);\n      kilometersRange.min = value.value.min;\n      kilometersRange.max = value.value.max;                \n      return { kilometersRange };\n    })\n    \n  }\n\n  setFilterAvailable = () => {this.setState({available: !this.state.available})}\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"row\">\n          <h1 className=\"text-center\">Check our map</h1>     \n        </header>\n  \n        <Filtres setFilterKilometersRange={this.setFilterKilometersRange} setFilterAvailable={this.setFilterAvailable} stateAvailable={this.state.available} stateKilometersRange={this.state.kilometersRange}></Filtres>\n\n        <MapWrapper filterAvailable={this.state.available} filterKilometersRange={this.state.kilometersRange}></MapWrapper>\n  \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}