{"version":3,"sources":["img/temporary-photo.png","components/MapWrapper.js","components/Filtres.js","components/App.js","index.js"],"names":["module","exports","MapWrapper","state","vehicles","vehiclesDownloaded","fetch","then","res","json","setState","objects","forceUpdate","status","L","icon","iconUrl","listVehicles","this","props","filterAvailable","filter","vehicle","rangeKm","filterKilometersRange","min","max","map","val","Marker","position","location","latitude","longitude","setDynamicMarkerColor","key","id","Popup","className","name","platesNumber","style","backgroundColor","setDynamicStatusColor","src","carTemporary","alt","width","batteryLevelPct","Map","center","zoom","TileLayer","url","attribution","React","Component","Filtres","type","onChange","setFilterAvailable","maxValue","minValue","formatLabel","value","stateKilometersRange","setFilterKilometersRange","App","available","kilometersRange","prevState","Object","assign","stateAvailable","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f1c5ad7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/temporary-photo.41231ccc.png\";","import React from 'react';\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\r\nimport L from 'leaflet'\r\nimport carTemporary from '../img/temporary-photo.png'\r\n\r\nclass MapWrapper extends React.Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      vehicles: {},\r\n      vehiclesDownloaded: false,\r\n    }\r\n  }\r\n// CONNECT TO API\r\n  componentDidMount() {\r\n    fetch(\"https://dev.vozilla.pl/api-client-portal/map?objectType=VEHICLE\")\r\n      .then(res => res.json())\r\n      .then(json => {this.setState({vehicles: json.objects, vehiclesDownloaded: true}); this.forceUpdate()});\r\n  }\r\n\r\n\r\n  setDynamicMarkerColor(status) {\r\n    return L.icon({\r\n      iconUrl: `https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-${status == 'AVAILABLE' ? 'green' : 'blue'}.png`,\r\n    });\r\n  }\r\n\r\n  setDynamicStatusColor(status) {\r\n    return status == 'AVAILABLE' ? '#28A745' : 'blue'\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let listVehicles = [];\r\n    if (this.state.vehiclesDownloaded) {\r\n      listVehicles = this.state.vehicles;\r\n\r\n      // FILTER OBJECTS\r\n      if(this.props.filterAvailable) { //SHOW ONLY AVAILABLE\r\n        listVehicles = listVehicles.filter(vehicle => vehicle.status == \"AVAILABLE\" )\r\n      }\r\n      // SHOW ONLY IF OBJECT CAN COVER TYPED DISTANCE\r\n      listVehicles = listVehicles.filter(vehicle => vehicle.rangeKm >= this.props.filterKilometersRange.min && vehicle.rangeKm <= this.props.filterKilometersRange.max )\r\n\r\n      listVehicles = listVehicles.map((val) => {\r\n        return (\r\n          <Marker position={[val.location.latitude, val.location.longitude]} icon={this.setDynamicMarkerColor(val.status)} key={val.id} >\r\n            <Popup>\r\n              <div className=\"vehiclePopup\">\r\n                <div className=\"textColumn\">\r\n                  <div>{val.name}</div>\r\n                  <div>{val.platesNumber}</div>\r\n\r\n                  \r\n                  <div className=\"rangeText\">\r\n                    Range: {val.rangeKm} km\r\n                  </div>\r\n\r\n                  <div className=\"statusWrapper\" style={{ backgroundColor: this.setDynamicStatusColor(val.status)}}>\r\n                    {val.status}\r\n                  </div>\r\n                  \r\n                </div>\r\n                <div className=\"photoColumn\">\r\n                  <img src={carTemporary} alt=\"Car\"/>\r\n                  <div className=\"myProgress\">\r\n                    <div className=\"myBar\" style={{ width: `${val.batteryLevelPct}%` }}></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        );\r\n      });\r\n    }\r\n\r\n    \r\n\r\n    const position = [52.2627124327, 21];\r\n    return (\r\n      <Map center={position} zoom={13}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n        />\r\n        { listVehicles }\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapWrapper;","import React from 'react'\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\n\r\nfunction Filtres(props) {\r\n\r\n  return (\r\n    <div className=\"filtres\">\r\n      <label className=\"chechbox-container\">Available\r\n        <input type=\"checkbox\" onChange={props.setFilterAvailable} />\r\n        <span className=\"checkmark\"></span>\r\n      </label>\r\n\r\n      <div className=\"filterLabel\">Distance to drive:\r\n        <InputRange\r\n        maxValue={300}\r\n        minValue={0}\r\n        formatLabel={value => `${value} km`}\r\n        value={props.stateKilometersRange}\r\n        onChange={value => props.setFilterKilometersRange({value})}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filtres","import React from 'react';\r\nimport '../style/App.css';\r\nimport MapWrapper from './MapWrapper'\r\nimport Filtres from './Filtres'\r\n\r\n\r\n\r\nexport class App extends React.Component {\r\n\r\n  state = {\r\n    available: false,\r\n    kilometersRange: { min: 0, max: 300 },\r\n  };\r\n\r\n\r\n  setFilterKilometersRange = (value) => {\r\n\r\n    this.setState(prevState => {\r\n      let kilometersRange = Object.assign({}, prevState.kilometersRange);\r\n      kilometersRange.min = value.value.min;\r\n      kilometersRange.max = value.value.max;                \r\n      return { kilometersRange };\r\n    })\r\n    \r\n  }\r\n\r\n  setFilterAvailable = () => {this.setState({available: !this.state.available})}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"row\">\r\n          <h1 className=\"text-center\">Check our map</h1>     \r\n        </header>\r\n  \r\n        <Filtres setFilterKilometersRange={this.setFilterKilometersRange} setFilterAvailable={this.setFilterAvailable} stateAvailable={this.state.available} stateKilometersRange={this.state.kilometersRange}></Filtres>\r\n\r\n        <MapWrapper filterAvailable={this.state.available} filterKilometersRange={this.state.kilometersRange}></MapWrapper>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './components/App.js';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}